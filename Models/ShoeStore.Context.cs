//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShoeStore.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShoeStoreEntities : DbContext
    {
        public ShoeStoreEntities()
            : base("name=ShoeStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetColorOfProduct_Result> GetColorOfProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetColorOfProduct_Result>("GetColorOfProduct", productIdParameter);
        }
    
        public virtual ObjectResult<GetProductDetail_Result> GetProductDetail(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductDetail_Result>("GetProductDetail", productIdParameter);
        }
    
        public virtual ObjectResult<GetProducts_Result> GetProducts(Nullable<int> qty, string type)
        {
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProducts_Result>("GetProducts", qtyParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetQuantity(Nullable<int> productId, Nullable<int> sizeId, Nullable<int> colorId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("sizeId", sizeId) :
                new ObjectParameter("sizeId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetQuantity", productIdParameter, sizeIdParameter, colorIdParameter);
        }
    
        public virtual ObjectResult<GetSizeOfProduct_Result> GetSizeOfProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSizeOfProduct_Result>("GetSizeOfProduct", productIdParameter);
        }
    }
}
