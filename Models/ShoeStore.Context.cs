//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShoeStore.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShoeStoreEntities : DbContext
    {
        public ShoeStoreEntities()
            : base("name=ShoeStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int addSizeColor(Nullable<int> productId, Nullable<int> sizeId, Nullable<int> colorId, Nullable<int> qty, ObjectParameter message)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("sizeId", sizeId) :
                new ObjectParameter("sizeId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("colorId", colorId) :
                new ObjectParameter("colorId", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addSizeColor", productIdParameter, sizeIdParameter, colorIdParameter, qtyParameter, message);
        }
    
        public virtual ObjectResult<string> AuthenticateRegister(string username, string password, string customerName, string email, string phoneNumber, string address, byte[] image)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AuthenticateRegister", usernameParameter, passwordParameter, customerNameParameter, emailParameter, phoneNumberParameter, addressParameter, imageParameter);
        }
    
        public virtual int DeleteProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", productIDParameter);
        }
    
        public virtual ObjectResult<GetColorOfProduct_Result> GetColorOfProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetColorOfProduct_Result>("GetColorOfProduct", productIdParameter);
        }
    
        public virtual int GetCustomer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomer");
        }
    
        public virtual ObjectResult<GetProductDetail_Result> GetProductDetail(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductDetail_Result>("GetProductDetail", productIdParameter);
        }
    
        public virtual ObjectResult<GetProducts_Result> GetProducts(Nullable<int> qty, string type)
        {
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProducts_Result>("GetProducts", qtyParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetQuantity(Nullable<int> productId, Nullable<int> sizeId, Nullable<int> colorId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("sizeId", sizeId) :
                new ObjectParameter("sizeId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetQuantity", productIdParameter, sizeIdParameter, colorIdParameter);
        }
    
        public virtual ObjectResult<GetSizeOfProduct_Result> GetSizeOfProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSizeOfProduct_Result>("GetSizeOfProduct", productIdParameter);
        }
    
        public virtual int InsertProduct(string productName, Nullable<double> productPrice, Nullable<int> productCategory, string description)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("ProductPrice", productPrice) :
                new ObjectParameter("ProductPrice", typeof(double));
    
            var productCategoryParameter = productCategory.HasValue ?
                new ObjectParameter("ProductCategory", productCategory) :
                new ObjectParameter("ProductCategory", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", productNameParameter, productPriceParameter, productCategoryParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<SearchProduct_Result> SearchProduct(string productName)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchProduct_Result>("SearchProduct", productNameParameter);
        }
    
        public virtual int UpdateProduct(Nullable<int> productID, string productName, Nullable<double> productPrice, Nullable<int> productCategory, string description)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("ProductPrice", productPrice) :
                new ObjectParameter("ProductPrice", typeof(double));
    
            var productCategoryParameter = productCategory.HasValue ?
                new ObjectParameter("ProductCategory", productCategory) :
                new ObjectParameter("ProductCategory", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduct", productIDParameter, productNameParameter, productPriceParameter, productCategoryParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> UploadImageToProduct(byte[] imgData, string imgExt, Nullable<int> productId)
        {
            var imgDataParameter = imgData != null ?
                new ObjectParameter("ImgData", imgData) :
                new ObjectParameter("ImgData", typeof(byte[]));
    
            var imgExtParameter = imgExt != null ?
                new ObjectParameter("ImgExt", imgExt) :
                new ObjectParameter("ImgExt", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("UploadImageToProduct", imgDataParameter, imgExtParameter, productIdParameter);
        }
    
        public virtual ObjectResult<string> AuthenticateLogin(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AuthenticateLogin", usernameParameter);
        }
    
        public virtual ObjectResult<getUserSession_Result> getUserSession(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserSession_Result>("getUserSession", usernameParameter);
        }
    }
}
